startup();
q()
startup();
get.item.data
library
library(evecalc)
detach(evecalv)
detach(evecalc)
detach('evecalc')
?detach
search()
detach('package:evecalc')
library(evecalc)
q()
startup();
getwd()
lsos()
bpcost
q()
startup();
q()
y
startup();
lsos()
name.dt
library(evecalc)
naem.dt <- get.name.data()
name.dt <- get.name.data()
rm(naem.dt)
item.dt <- get.item.data();
item.dt
name.dt
item.dt[grep('Material', categoryName)]
item.dt[grep('Material', categoryName)][1:20]
item.dt[grep('Material', categoryName)]$groupName
options
option
options()
item.dt[grep('Material', categoryName)]
item.dt[grep('Material', categoryName)][published == 1]
item.dt[grep('Material', categoryName)][published == 1]$typeName
item.dt[grep('Material', categoryName)][published == 1]$typeID
idlist.material <- item.dt[grep('Material', categoryName)][published == 1]$typeID
item.dt[grep('Material', categoryName)][published == 1]
item.dt[grep("Robotics", typeName)]
item.dt[categoryName == 'Material'][published == 1]
item.dt[categoryName == 'Material'][published == 1]
idlist.material <- item.dt[categoryName == 'Material'][published == 1]$typeID
idlist.material
pricedata.material.dt <- get.evecentral.data(idlist.material)
pricedata.material.dt <- get.evecentral.data(idlist.material, name.dt)
pricedata.material.dt
lsos()
library(devtools)
dev_mode()
load_all('evecalc')
load_all('../evecalc')
pricedata.material.dt <- get.evecentral.data(idlist.material, name.dt)
get.evecentral.data
pricedata.material.dt <- get.evecentral.data(idlist.material, name.dt = name.dt)
pricedata.material.dt
item.dt[grep('Nid', typeName)]
calculate.advanced.construction.cost(24483, ME = c(1, 30), price.dt = pricedata.dt)
calculate.advanced.construction.cost(24483, ME = c(1, 30), price.dt = pricedata.material.dt)
calculate.advanced.construction.cost(24483, ME = c(1, 30), price.dt = pricedata.material.dt, verbose = FALSE)
calculate.construction.cost
dev_mode()
q()
y
startup();
dev_mode()
load_all('../evecalc/', reset = TRUE)
pricedata.dt
lsos()
startup();
lsos()
rm(args, special)
rm(bpcost)
pricedata.material.dt <- get.evecentral.data(idlist.material)
pricedata.material.dt <- get.evecentral.data(idlist.material, system = 'Dodixie')
pricedata.material.dt <- get.evecentral.data(idlist.material, system = 'Dodixie', name.dt = name.dt)
load_all('../evecalc/', reset = TRUE)
pricedata.material.dt <- get.evecentral.data(idlist.material, system = 'Dodixie', name.dt = name.dt)
library(XML)
pricedata.material.dt <- get.evecentral.data(idlist.material, system = 'Dodixie', name.dt = name.dt)
pricedata.material.dt
item.dt[grep('Manticore', typeName)]
calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE)
calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.material.dt, verbose = T)
item.dt[typeID %in% pricedata.material.dt$typeID]
item.dt[typeID %in% pricedata.material.dt$typeID][grep('Blocks', typeName)]
item.dt[grep('Planet', categoryName)]
item.dt[categoryID == 43]
pricedata.pi.dt <- get.evecentral.data(item.dt[categoryID == 43]$typeID);
pricedata.pi.dt <- get.evecentral.data(item.dt[categoryID == 43]$typeID, name.dt = name.dt, system = 'Dodixie');
pricedata.dt <- rbind(pricedata.material.dt, pricedata.pi.dt)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.dt, verbose = T)
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.dt, verbose = F)
document('../evecalc')
document('../evecalc')
document('../evecalc')
document('../evecalc')
document('../evecalc')
document('../evecalc')
load_all('../evecalc/', reset = TRUE); calculate.advanced.construction.cost(12032, ME = c(-4, 30), price.dt = pricedata.dt, verbose = F)
load_all('../evecalc/', reset = TRUE);
load_all('../evecalc/', reset = TRUE);
load_all('../evecalc/', reset = TRUE);
load_all('../evecalc/', reset = TRUE);
item.dt[grep('Thorax', typeName)]
calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE)
bpcost.dt
bpcost
bpcost.dt <- data.table(read.csv('~/workspace/eveindustry/data/bpcost.csv'))
bpcost.dt
bpcost.dt <- data.table(typeID = 627, typeName = 'Thorax', bpcost = 100000)
bpcost.dt
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
document('../evecalc/')
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
bpcost.dt
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)[, sum(requiredCost)]
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)[, sum(requiredCost)]
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
bpcost.dt
bpcost.dt <- data.table(typeID = c(627, 40), bpcost = c(100000, 10))
bpcost.dt
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
bpcost.dt
head(bpcost.dt)
str(bpcost.dt)
bpcost.dt
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
bpcost.dt <- data.table(typeID = c(627, 40), typeName = c('Thorax', 'Megacyte'), bpcost = c(100000, 10))
bpcost.dt
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = TRUE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); with(calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt), buildCost - materialCost)
load_all('../evecalc', reset = TRUE); with(calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt), buildCost - materialCost)
load_all('../evecalc', reset = TRUE); calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt)
load_all('../evecalc', reset = TRUE); with(calculate.construction.cost(627, ME = 30, price.dt = pricedata.dt, verbose = FALSE, bpcost.dt = bpcost.dt), buildCost - materialCost)
document('../evecalc/')
lsos()
pricedata.dt
item.dt[grep('Ishtar', typeName)]
calculate.advanced.construction.cost(12005, ME = c(-4, 30), price.dt = pricedata.dt)
calculate.advanced.construction.cost(12005, ME = c(-4, 30), price.dt = pricedata.dt, verbose = TRUE)
calculate.advanced.construction.cost(12005, ME = c(-4, 30), price.dt = pricedata.dt, verbose = FALSE)
calculate.advanced.construction.cost(12005, ME = c(-1, 30), price.dt = pricedata.dt, verbose = FALSE)
lsos()
item.dt[grep('Datacore', typeName)]
item.dt[grep('Datacore', typeName)][1:10]
item.dt[grep('Datacore', typeName)][published == 1]
item.dt[groupName == 'Datacores'][published == 1]
idlist.datacore <- item.dt[groupName == 'Datacores'][published == 1]$typeID
pricedata.datacore.dt <- get.evecentral.data(idlist.datacore)
pricedata.datacore.dt <- get.evecentral.data(idlist.datacore, name.dt = name.dt)
pricedata.dt <- rbind(pricedata.material.dt, pricedata.pi.dt, pricedata.datacore.dt)
pricedata.dt
pricedata.dt[, list(spread = ask / bid)]
pricedata.dt[, list(typeID, spread = ask / bid)]
pricedata.dt[, list(typeID, spread = ask / bid)][order(-spread)]
pricedata.dt[, list(typeID, spread = ask / bid)]
pricedata.dt
test('../evecalc')
test('../evecalc')
lsos()
item.dt
item.dt[grep('Kestrel', typeName)]
item.dt[grep('Cloaking', typeName)]
item.dt[grep('Ops', typeName)]
item.dt[grep('Cloaking', typeName)][1:10]
item.dt[typeID == 11370]
item.dt[grep('Cloaking.*Blueprint', typeName]
item.dt[grep('Cloaking.*Blueprint', typeName)]
item.dt[grep('Energized Adaptive.*II', typeName)]
?grep
item.dt[grep('Energized Adaptive.*II', typeName, useBytes = TRUE)]
item.dt[grep('Energized Adaptive.*II', typeName, useBytes = FALSE)]
item.dt[grep('Energized Adaptive.*II', typeName, useBytes = TRUE)]
q()
y
lsos()
getwd()
item.dt[grep('Energized Adaptive.*II', typeName, useBytes = TRUE)]
item.dt
startup();
item.dt[grep('Energized Adaptive.*II', typeName, useBytes = TRUE)]
lsos()
q()
startup();
q()
y
startup();
lsos()
c("ABX.TSX", "AGU.TSX", "ARX.TSX", "BMO.TSX", "BNS.TSX", "CM.TSX",
"CNR.TSX", "COS.TSX", "CP.TSX", "CTC.A.TSX", "ELD.TSX", "ENB.TSX",
"FM.TSX", "FTS.TSX", "K.TSX", "L.TSX", "MFC.TSX", "NXY.TSX",
"POT.TSX", "POW.TSX", "RCI.B.TSX", "RIM.TSX", "RY.TSX", "SC.TSX",
"SU.TSX", "TCK.B.TSX", "THI.TSX", "TLM.TSX", "TRP.TSX", "VRX.TSX",
"WN.TSX", "XEG.TSX", "XFN.TSX", "XGD.TSX", "XIU.TSX", "XMA.TSX"
)
symbols.portfolio <- c("ABX.TSX", "AGU.TSX", "ARX.TSX", "BMO.TSX", "BNS.TSX", "CM.TSX",
"CNR.TSX", "COS.TSX", "CP.TSX", "CTC.A.TSX", "ELD.TSX", "ENB.TSX",
"FM.TSX", "FTS.TSX", "K.TSX", "L.TSX", "MFC.TSX", "NXY.TSX",
"POT.TSX", "POW.TSX", "RCI.B.TSX", "RIM.TSX", "RY.TSX", "SC.TSX",
"SU.TSX", "TCK.B.TSX", "THI.TSX", "TLM.TSX", "TRP.TSX", "VRX.TSX",
"WN.TSX", "XEG.TSX", "XFN.TSX", "XGD.TSX", "XIU.TSX", "XMA.TSX"
)
symbols.portfolio
gsub('\\.TSX', '', symbols.portfolio)
stem <- gsub('\\.TSX', '', symbols.portfolio)
rm(symbols.portfolio,stem)
lsos()
pricedata.material.dt
pricedata.material.dt$typeID
dev_mode(TRUE)
load_all('../evecalc')
load_all('../evecalc'); pricedata.material.dt <- get.evecentral.data(pricedata.material.dt$typeID);
load_all('../evecalc'); pricedata.material.dt <- get.evecentral.data(pricedata.material.dt$typeID, name.dt = name.dt);
pricedata.material.dt
q()
y
startup();
lsos()
dev_mode(TRUE);
startup();
load_all('../evecalc')
lsos()
item.dt[grep('Planetary Comm', categoryName)]
item.dt[grep('Planetary Comm', categoryName)]$typeID
get.evecentral.data(item.dt[grep('Planetary Comm', categoryName)]$typeID, system = 'Amarr', name.dt = name.dt)
price.catcando.dt <- get.evecentral.data(item.dt[grep('Planetary Comm', categoryName)]$typeID, system = 'Amarr', name.dt = name.dt)
price.catcando.dt
item.dt
item.dt[, list(typeID, typeName, groupName, categoryName)]
merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])
merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])[, list(typeID, typeName, groupName, categoryName, system, bid, ask, price)]
merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])[, list(typeID, typeName, groupName, categoryName, system, bid, ask, price, cashmatprice = bid * 0.9)]
merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])[, list(typeID, typeName, groupName, categoryName, system, bid, ask, price, cashmatprice = round(bid * 0.9, 2))]
merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])[, list(typeID, typeName, groupName, categoryName, system, bid, ask, price, cashmatprice = round(bid * 0.9, 2))][order(typeID)]
write.csv(merge(price.catcando.dt, item.dt[, list(typeID, typeName, groupName, categoryName)])[, list(typeID, typeName, groupName, categoryName, system, bid, ask, price, cashmatprice = round(bid * 0.9, 2))][order(typeID)], file = '~/Dropbox/Temp/catcando.csv')
q()
y
q()
startup();
dev_mode(TRUE);
startup();
q()
dev_mode(TRUE); load_all('../evecalc'); startup();
lsos()
q()
y
lsos()
rm(list = ls())
dev_mode(TRUE); startup(); load_all('../evecalc/');
dev_mode(TRUE); startup(); load_all('../evecalc/');
q()
dev_mode(TRUE); startup(); load_all('../evecalc/');
dev_mode(TRUE); startup();
load_all('../evecalc/');
dev_mode(TRUE); load_all('../evecalc'); startup();
q()
